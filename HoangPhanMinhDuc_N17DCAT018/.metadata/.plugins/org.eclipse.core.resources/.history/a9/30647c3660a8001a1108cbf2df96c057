package app.controller;
//import org.hibernate.Query;
//import org.hibernate.Session;
import org.hibernate.SessionFactory;
//import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.sun.xml.internal.bind.CycleRecoverable.Context;

import java.io.IOException;
import java.io.File;
import java.util.*;

import javax.servlet.ServletContext;
import javax.servlet.http.*;

import app.entity.*;
import app.query.*;
import app.render.Render;

@Transactional
@Controller
public class SongController {
	@Autowired
	SessionFactory ftr;
	
	@ModelAttribute("userName")
	public String showUsername(HttpServletRequest req){
		if (req.getSession().getAttribute("logged") != null) return req.getSession().getAttribute("username").toString();
		else return "";
	}
	
	@ModelAttribute("kind")
	public List<Kind> getKind(){
		return new KindQuery(ftr).get();
	}
	
	@ModelAttribute("lovePl")
	public Collection<PlayListDetail> getsongfromlovepl(HttpServletRequest req){
		if (req.getSession().getAttribute("logged") != null){
			PlayListQuery plQuery = new PlayListQuery(ftr);
			return plQuery.getPlayList((int)req.getSession().getAttribute("userId"), 1).get(0).getPlDetail();
		}
		else return null;
	}
	
	@RequestMapping(value="upload",method=RequestMethod.GET)
	public String uploadPage(ModelMap model, HttpServletRequest req, HttpServletResponse res ) throws Exception{
		Render r = new Render(model);
		HttpSession httpss = req.getSession();
		if (httpss.getAttribute("logged") == null) res.sendRedirect("./home.htm");
		//else r.setModelAttr("currUsername", ((User)httpss.getAttribute("userObj")).getUsername());
		r.setModelAttr("listKind", new KindQuery(ftr).get());
		return r.render("mainLayout", "song/upload");
	}
	
	
	@RequestMapping(value="upload",method=RequestMethod.POST)
	public String upload(@RequestParam("uplSong") MultipartFile song, ModelMap model, 
			HttpServletRequest req, HttpServletResponse res) throws IOException{
		Song s = new Song();
		Render r = new Render(model);
		SongQuery query = new SongQuery(ftr);
		UserQuery uQr = new UserQuery(ftr);
		String songName = req.getParameter("songName").trim();
		String singerName = req.getParameter("singerName").trim();
		String musicianName = req.getParameter("musicianName").trim() == "" ? "Không biết":req.getParameter("musicianName").trim();
		String kindId = req.getParameter("kind").trim();
		Kind kind = new KindQuery(ftr).get(Integer.parseInt(kindId));
//		Kiểm tra extension của file
		String ext = song.getOriginalFilename().substring(song.getOriginalFilename().lastIndexOf("."));
//		==============================
		if (!song.isEmpty() && ext.equalsIgnoreCase(".mp3")){
			String rName = "";
			for(int i = 0; i < 10; i++){
				rName = rName + (char)(int)(Math.random() * (122 - 97 + 1) + 97);
			}
			System.out.print(rName);
			s.setLink(rName + ".mp3");
			s.setUser(uQr.get("username="+req.getSession().getAttribute("username")));
			s.setUploadAt(new Date());
			// Generate random name for songName
			s.setSongName(songName);
			s.setSingerName(singerName);
			s.setMusicianName(musicianName);
			s.setKind(kind);
			s.setView(0);
			song.transferTo(new File(req.getServletContext().getRealPath("/music_src/" + rName + ".mp3")));
			query.add(s);
//			D:\programming\Java\HoangPhanMinhDuc_N17DCAT018\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\DoAnWebNgheNhac\music_src\WYS - Snowman.mp3			
//			res.sendRedirect("./upload.htm");
			r.setModelAttr("success", true);
			return r.render("mainLayout", "song/upload");
		}
		else {
			r.setModelAttr("error", true);
			return r.render("mainLayout", "song/upload");
		}
	}
	
	@RequestMapping(value="search", method=RequestMethod.GET)
	public void searchSong(HttpServletRequest req, HttpServletResponse res) throws IOException {
		String name = req.getParameter("name");
		SongQuery sQuery = new SongQuery(ftr);
		System.out.println(sQuery.search(name));
		for(Song s:sQuery.search(name)) {
			System.out.println(s.getSongName());
		}
		res.getWriter().print("search");
	}
}
